   1               		.file	"hd44780.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 104               		.section	.text.lcd_e_port_low,"ax",@progbits
 107               	lcd_e_port_low:
   1:hd44780.c     **** /*****************************************************************************
   2:hd44780.c     **** Title  :   HD44780 Library
   3:hd44780.c     **** Author :   SA Development
   4:hd44780.c     **** Version:   1.11
   5:hd44780.c     **** *****************************************************************************/
   6:hd44780.c     **** 
   7:hd44780.c     **** #include "avr\pgmspace.h"
   8:hd44780.c     **** #include "hd44780.h"
   9:hd44780.c     **** #include "avr\sfr_defs.h"
  10:hd44780.c     **** #if (USE_ADELAY_LIBRARY==1)
  11:hd44780.c     ****   #include "adelay.h"
  12:hd44780.c     **** #else
  13:hd44780.c     ****   #define Delay_ns(__ns) \
  14:hd44780.c     ****     if((unsigned long) (F_CPU/1000000000.0 * __ns) != F_CPU/1000000000.0 * __ns)\
  15:hd44780.c     ****           __builtin_avr_delay_cycles((unsigned long) ( F_CPU/1000000000.0 * __ns)+1);\
  16:hd44780.c     ****     else __builtin_avr_delay_cycles((unsigned long) ( F_CPU/1000000000.0 * __ns))
  17:hd44780.c     ****   #define Delay_us(__us) \
  18:hd44780.c     ****     if((unsigned long) (F_CPU/1000000.0 * __us) != F_CPU/1000000.0 * __us)\
  19:hd44780.c     ****           __builtin_avr_delay_cycles((unsigned long) ( F_CPU/1000000.0 * __us)+1);\
  20:hd44780.c     ****     else __builtin_avr_delay_cycles((unsigned long) ( F_CPU/1000000.0 * __us))
  21:hd44780.c     ****   #define Delay_ms(__ms) \
  22:hd44780.c     ****     if((unsigned long) (F_CPU/1000.0 * __ms) != F_CPU/1000.0 * __ms)\
  23:hd44780.c     ****           __builtin_avr_delay_cycles((unsigned long) ( F_CPU/1000.0 * __ms)+1);\
  24:hd44780.c     ****     else __builtin_avr_delay_cycles((unsigned long) ( F_CPU/1000.0 * __ms))
  25:hd44780.c     ****   #define Delay_s(__s) \
  26:hd44780.c     ****     if((unsigned long) (F_CPU/1.0 * __s) != F_CPU/1.0 * __s)\
  27:hd44780.c     ****           __builtin_avr_delay_cycles((unsigned long) ( F_CPU/1.0 * __s)+1);\
  28:hd44780.c     ****     else __builtin_avr_delay_cycles((unsigned long) ( F_CPU/1.0 * __s))
  29:hd44780.c     **** #endif
  30:hd44780.c     **** 
  31:hd44780.c     **** #if !defined(LCD_BITS) || (LCD_BITS!=4 && LCD_BITS!=8)
  32:hd44780.c     ****   #error LCD_BITS is not defined or not valid.
  33:hd44780.c     **** #endif
  34:hd44780.c     **** 
  35:hd44780.c     **** #if !defined(WAIT_MODE) || (WAIT_MODE!=0 && WAIT_MODE!=1)
  36:hd44780.c     ****   #error WAIT_MODE is not defined or not valid.
  37:hd44780.c     **** #endif
  38:hd44780.c     **** 
  39:hd44780.c     **** #if !defined(RW_LINE_IMPLEMENTED) || (RW_LINE_IMPLEMENTED!=0 && RW_LINE_IMPLEMENTED!=1)
  40:hd44780.c     ****   #error RW_LINE_IMPLEMENTED is not defined or not valid.
  41:hd44780.c     **** #endif
  42:hd44780.c     **** 
  43:hd44780.c     **** #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED!=1)
  44:hd44780.c     ****   #error WAIT_MODE=1 requires RW_LINE_IMPLEMENTED=1.
  45:hd44780.c     **** #endif
  46:hd44780.c     **** 
  47:hd44780.c     **** #if !defined(LCD_DISPLAYS) || (LCD_DISPLAYS<1) || (LCD_DISPLAYS>4)
  48:hd44780.c     ****   #error LCD_DISPLAYS is not defined or not valid.
  49:hd44780.c     **** #endif
  50:hd44780.c     **** 
  51:hd44780.c     **** // Constants/Macros
  52:hd44780.c     **** #define PIN(x) (*(&x - 2))           // Address of Data Direction Register of Port X
  53:hd44780.c     **** #define DDR(x) (*(&x - 1))           // Address of Input Register of Port X
  54:hd44780.c     **** 
  55:hd44780.c     **** //PORT defines
  56:hd44780.c     **** #define lcd_rs_port_low() LCD_RS_PORT&=~_BV(LCD_RS_PIN)
  57:hd44780.c     **** #if RW_LINE_IMPLEMENTED==1
  58:hd44780.c     ****   #define lcd_rw_port_low() LCD_RW_PORT&=~_BV(LCD_RW_PIN)
  59:hd44780.c     **** #endif
  60:hd44780.c     **** #define lcd_db0_port_low() LCD_DB0_PORT&=~_BV(LCD_DB0_PIN)
  61:hd44780.c     **** #define lcd_db1_port_low() LCD_DB1_PORT&=~_BV(LCD_DB1_PIN)
  62:hd44780.c     **** #define lcd_db2_port_low() LCD_DB2_PORT&=~_BV(LCD_DB2_PIN)
  63:hd44780.c     **** #define lcd_db3_port_low() LCD_DB3_PORT&=~_BV(LCD_DB3_PIN)
  64:hd44780.c     **** #define lcd_db4_port_low() LCD_DB4_PORT&=~_BV(LCD_DB4_PIN)
  65:hd44780.c     **** #define lcd_db5_port_low() LCD_DB5_PORT&=~_BV(LCD_DB5_PIN)
  66:hd44780.c     **** #define lcd_db6_port_low() LCD_DB6_PORT&=~_BV(LCD_DB6_PIN)
  67:hd44780.c     **** #define lcd_db7_port_low() LCD_DB7_PORT&=~_BV(LCD_DB7_PIN)
  68:hd44780.c     **** 
  69:hd44780.c     **** #define lcd_rs_port_high() LCD_RS_PORT|=_BV(LCD_RS_PIN)
  70:hd44780.c     **** #if RW_LINE_IMPLEMENTED==1
  71:hd44780.c     ****   #define lcd_rw_port_high() LCD_RW_PORT|=_BV(LCD_RW_PIN)
  72:hd44780.c     **** #endif
  73:hd44780.c     **** #define lcd_db0_port_high() LCD_DB0_PORT|=_BV(LCD_DB0_PIN)
  74:hd44780.c     **** #define lcd_db1_port_high() LCD_DB1_PORT|=_BV(LCD_DB1_PIN)
  75:hd44780.c     **** #define lcd_db2_port_high() LCD_DB2_PORT|=_BV(LCD_DB2_PIN)
  76:hd44780.c     **** #define lcd_db3_port_high() LCD_DB3_PORT|=_BV(LCD_DB3_PIN)
  77:hd44780.c     **** #define lcd_db4_port_high() LCD_DB4_PORT|=_BV(LCD_DB4_PIN)
  78:hd44780.c     **** #define lcd_db5_port_high() LCD_DB5_PORT|=_BV(LCD_DB5_PIN)
  79:hd44780.c     **** #define lcd_db6_port_high() LCD_DB6_PORT|=_BV(LCD_DB6_PIN)
  80:hd44780.c     **** #define lcd_db7_port_high() LCD_DB7_PORT|=_BV(LCD_DB7_PIN)
  81:hd44780.c     **** 
  82:hd44780.c     **** #define lcd_rs_port_set(value) if (value) lcd_rs_port_high(); else lcd_rs_port_low();
  83:hd44780.c     **** #if RW_LINE_IMPLEMENTED==1
  84:hd44780.c     ****   #define lcd_rw_port_set(value) if (value) lcd_rw_port_high(); else lcd_rw_port_low();
  85:hd44780.c     **** #endif
  86:hd44780.c     **** #define lcd_db0_port_set(value) if (value) lcd_db0_port_high(); else lcd_db0_port_low();
  87:hd44780.c     **** #define lcd_db1_port_set(value) if (value) lcd_db1_port_high(); else lcd_db1_port_low();
  88:hd44780.c     **** #define lcd_db2_port_set(value) if (value) lcd_db2_port_high(); else lcd_db2_port_low();
  89:hd44780.c     **** #define lcd_db3_port_set(value) if (value) lcd_db3_port_high(); else lcd_db3_port_low();
  90:hd44780.c     **** #define lcd_db4_port_set(value) if (value) lcd_db4_port_high(); else lcd_db4_port_low();
  91:hd44780.c     **** #define lcd_db5_port_set(value) if (value) lcd_db5_port_high(); else lcd_db5_port_low();
  92:hd44780.c     **** #define lcd_db6_port_set(value) if (value) lcd_db6_port_high(); else lcd_db6_port_low();
  93:hd44780.c     **** #define lcd_db7_port_set(value) if (value) lcd_db7_port_high(); else lcd_db7_port_low();
  94:hd44780.c     **** 
  95:hd44780.c     **** //PIN defines
  96:hd44780.c     **** #define lcd_db0_pin_get() (((PIN(LCD_DB0_PORT) & _BV(LCD_DB0_PIN))==0)?0:1)
  97:hd44780.c     **** #define lcd_db1_pin_get() (((PIN(LCD_DB1_PORT) & _BV(LCD_DB1_PIN))==0)?0:1)
  98:hd44780.c     **** #define lcd_db2_pin_get() (((PIN(LCD_DB2_PORT) & _BV(LCD_DB2_PIN))==0)?0:1)
  99:hd44780.c     **** #define lcd_db3_pin_get() (((PIN(LCD_DB3_PORT) & _BV(LCD_DB3_PIN))==0)?0:1)
 100:hd44780.c     **** #define lcd_db4_pin_get() (((PIN(LCD_DB4_PORT) & _BV(LCD_DB4_PIN))==0)?0:1)
 101:hd44780.c     **** #define lcd_db5_pin_get() (((PIN(LCD_DB5_PORT) & _BV(LCD_DB5_PIN))==0)?0:1)
 102:hd44780.c     **** #define lcd_db6_pin_get() (((PIN(LCD_DB6_PORT) & _BV(LCD_DB6_PIN))==0)?0:1)
 103:hd44780.c     **** #define lcd_db7_pin_get() (((PIN(LCD_DB7_PORT) & _BV(LCD_DB7_PIN))==0)?0:1)
 104:hd44780.c     **** 
 105:hd44780.c     **** //DDR defines
 106:hd44780.c     **** #define lcd_rs_ddr_low() DDR(LCD_RS_PORT)&=~_BV(LCD_RS_PIN)
 107:hd44780.c     **** #if RW_LINE_IMPLEMENTED==1
 108:hd44780.c     ****   #define lcd_rw_ddr_low() DDR(LCD_RW_PORT)&=~_BV(LCD_RW_PIN)
 109:hd44780.c     **** #endif
 110:hd44780.c     **** #define lcd_db0_ddr_low() DDR(LCD_DB0_PORT)&=~_BV(LCD_DB0_PIN)
 111:hd44780.c     **** #define lcd_db1_ddr_low() DDR(LCD_DB1_PORT)&=~_BV(LCD_DB1_PIN)
 112:hd44780.c     **** #define lcd_db2_ddr_low() DDR(LCD_DB2_PORT)&=~_BV(LCD_DB2_PIN)
 113:hd44780.c     **** #define lcd_db3_ddr_low() DDR(LCD_DB3_PORT)&=~_BV(LCD_DB3_PIN)
 114:hd44780.c     **** #define lcd_db4_ddr_low() DDR(LCD_DB4_PORT)&=~_BV(LCD_DB4_PIN)
 115:hd44780.c     **** #define lcd_db5_ddr_low() DDR(LCD_DB5_PORT)&=~_BV(LCD_DB5_PIN)
 116:hd44780.c     **** #define lcd_db6_ddr_low() DDR(LCD_DB6_PORT)&=~_BV(LCD_DB6_PIN)
 117:hd44780.c     **** #define lcd_db7_ddr_low() DDR(LCD_DB7_PORT)&=~_BV(LCD_DB7_PIN)
 118:hd44780.c     **** 
 119:hd44780.c     **** #define lcd_rs_ddr_high() DDR(LCD_RS_PORT)|=_BV(LCD_RS_PIN)
 120:hd44780.c     **** #if RW_LINE_IMPLEMENTED==1
 121:hd44780.c     ****   #define lcd_rw_ddr_high() DDR(LCD_RW_PORT)|=_BV(LCD_RW_PIN)
 122:hd44780.c     **** #endif
 123:hd44780.c     **** #define lcd_db0_ddr_high() DDR(LCD_DB0_PORT)|=_BV(LCD_DB0_PIN)
 124:hd44780.c     **** #define lcd_db1_ddr_high() DDR(LCD_DB1_PORT)|=_BV(LCD_DB1_PIN)
 125:hd44780.c     **** #define lcd_db2_ddr_high() DDR(LCD_DB2_PORT)|=_BV(LCD_DB2_PIN)
 126:hd44780.c     **** #define lcd_db3_ddr_high() DDR(LCD_DB3_PORT)|=_BV(LCD_DB3_PIN)
 127:hd44780.c     **** #define lcd_db4_ddr_high() DDR(LCD_DB4_PORT)|=_BV(LCD_DB4_PIN)
 128:hd44780.c     **** #define lcd_db5_ddr_high() DDR(LCD_DB5_PORT)|=_BV(LCD_DB5_PIN)
 129:hd44780.c     **** #define lcd_db6_ddr_high() DDR(LCD_DB6_PORT)|=_BV(LCD_DB6_PIN)
 130:hd44780.c     **** #define lcd_db7_ddr_high() DDR(LCD_DB7_PORT)|=_BV(LCD_DB7_PIN)
 131:hd44780.c     **** 
 132:hd44780.c     **** #define lcd_rs_ddr_set(value) if (value) lcd_rs_ddr_high(); else lcd_rs_ddr_low();
 133:hd44780.c     **** #if RW_LINE_IMPLEMENTED==1
 134:hd44780.c     ****   #define lcd_rw_ddr_set(value) if (value) lcd_rw_ddr_high(); else lcd_rw_ddr_low();
 135:hd44780.c     **** #endif
 136:hd44780.c     **** #define lcd_db0_ddr_set(value) if (value) lcd_db0_ddr_high(); else lcd_db0_ddr_low();
 137:hd44780.c     **** #define lcd_db1_ddr_set(value) if (value) lcd_db1_ddr_high(); else lcd_db1_ddr_low();
 138:hd44780.c     **** #define lcd_db2_ddr_set(value) if (value) lcd_db2_ddr_high(); else lcd_db2_ddr_low();
 139:hd44780.c     **** #define lcd_db3_ddr_set(value) if (value) lcd_db3_ddr_high(); else lcd_db3_ddr_low();
 140:hd44780.c     **** #define lcd_db4_ddr_set(value) if (value) lcd_db4_ddr_high(); else lcd_db4_ddr_low();
 141:hd44780.c     **** #define lcd_db5_ddr_set(value) if (value) lcd_db5_ddr_high(); else lcd_db5_ddr_low();
 142:hd44780.c     **** #define lcd_db6_ddr_set(value) if (value) lcd_db6_ddr_high(); else lcd_db6_ddr_low();
 143:hd44780.c     **** #define lcd_db7_ddr_set(value) if (value) lcd_db7_ddr_high(); else lcd_db7_ddr_low();
 144:hd44780.c     **** 
 145:hd44780.c     **** #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
 146:hd44780.c     **** static unsigned char PrevCmdInvolvedAddressCounter=0;
 147:hd44780.c     **** #endif
 148:hd44780.c     **** 
 149:hd44780.c     **** #if (LCD_DISPLAYS>1)
 150:hd44780.c     **** static unsigned char ActiveDisplay=1;
 151:hd44780.c     **** #endif
 152:hd44780.c     **** 
 153:hd44780.c     **** static inline void lcd_e_port_low()
 154:hd44780.c     **** {
 109               	.LM0:
 110               	.LFBB1:
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
 155:hd44780.c     ****   #if (LCD_DISPLAYS>1)
 156:hd44780.c     ****   switch (ActiveDisplay)
 157:hd44780.c     ****     {
 158:hd44780.c     ****       case 2 : LCD_E2_PORT&=~_BV(LCD_E2_PIN);
 159:hd44780.c     ****                break;
 160:hd44780.c     ****       #if (LCD_DISPLAYS>=3)
 161:hd44780.c     ****       case 3 : LCD_E3_PORT&=~_BV(LCD_E3_PIN);
 162:hd44780.c     ****                break;
 163:hd44780.c     ****       #endif
 164:hd44780.c     ****       #if (LCD_DISPLAYS==4)
 165:hd44780.c     ****       case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
 166:hd44780.c     ****                break;
 167:hd44780.c     ****       #endif
 168:hd44780.c     ****       default :
 169:hd44780.c     ****   #endif
 170:hd44780.c     ****                 LCD_E_PORT&=~_BV(LCD_E_PIN);
 116               	.LM1:
 117 0000 C198      		cbi 0x18,1
 118 0002 0895      		ret
 120               	.Lscope1:
 121               		.section	.text.lcd_e_port_high,"ax",@progbits
 124               	lcd_e_port_high:
 171:hd44780.c     ****   #if (LCD_DISPLAYS>1)
 172:hd44780.c     ****     }
 173:hd44780.c     ****   #endif
 174:hd44780.c     **** }
 175:hd44780.c     **** 
 176:hd44780.c     **** static inline void lcd_e_port_high()
 177:hd44780.c     **** {
 126               	.LM2:
 127               	.LFBB2:
 128               	/* prologue: function */
 129               	/* frame size = 0 */
 130               	/* stack size = 0 */
 131               	.L__stack_usage = 0
 178:hd44780.c     ****   #if (LCD_DISPLAYS>1)
 179:hd44780.c     ****   switch (ActiveDisplay)
 180:hd44780.c     ****     {
 181:hd44780.c     ****       case 2 : LCD_E2_PORT|=_BV(LCD_E2_PIN);
 182:hd44780.c     ****                break;
 183:hd44780.c     ****       #if (LCD_DISPLAYS>=3)
 184:hd44780.c     ****       case 3 : LCD_E3_PORT|=_BV(LCD_E3_PIN);
 185:hd44780.c     ****                break;
 186:hd44780.c     ****       #endif
 187:hd44780.c     ****       #if (LCD_DISPLAYS==4)
 188:hd44780.c     ****       case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
 189:hd44780.c     ****                break;
 190:hd44780.c     ****       #endif
 191:hd44780.c     ****       default :
 192:hd44780.c     ****   #endif
 193:hd44780.c     ****                 LCD_E_PORT|=_BV(LCD_E_PIN);
 133               	.LM3:
 134 0000 C19A      		sbi 0x18,1
 135 0002 0895      		ret
 137               	.Lscope2:
 138               		.section	.text.lcd_write,"ax",@progbits
 143               	lcd_write:
 194:hd44780.c     ****   #if (LCD_DISPLAYS>1)
 195:hd44780.c     ****     }
 196:hd44780.c     ****   #endif
 197:hd44780.c     **** }
 198:hd44780.c     **** 
 199:hd44780.c     **** static inline void lcd_e_ddr_low()
 200:hd44780.c     **** {
 201:hd44780.c     ****   #if (LCD_DISPLAYS>1)
 202:hd44780.c     ****   switch (ActiveDisplay)
 203:hd44780.c     ****     {
 204:hd44780.c     ****       case 2 : DDR(LCD_E2_PORT)&=~_BV(LCD_E2_PIN);
 205:hd44780.c     ****                break;
 206:hd44780.c     ****       #if (LCD_DISPLAYS>=3)
 207:hd44780.c     ****       case 3 : DDR(LCD_E3_PORT)&=~_BV(LCD_E3_PIN);
 208:hd44780.c     ****                break;
 209:hd44780.c     ****       #endif
 210:hd44780.c     ****       #if (LCD_DISPLAYS==4)
 211:hd44780.c     ****       case 4 : DDR(LCD_E4_PORT)&=~_BV(LCD_E4_PIN);
 212:hd44780.c     ****                break;
 213:hd44780.c     ****       #endif
 214:hd44780.c     ****       default :
 215:hd44780.c     ****   #endif
 216:hd44780.c     ****                 DDR(LCD_E_PORT)&=~_BV(LCD_E_PIN);
 217:hd44780.c     ****   #if (LCD_DISPLAYS>1)
 218:hd44780.c     ****     }
 219:hd44780.c     ****   #endif
 220:hd44780.c     **** }
 221:hd44780.c     **** 
 222:hd44780.c     **** static inline void lcd_e_ddr_high()
 223:hd44780.c     **** {
 224:hd44780.c     ****   #if (LCD_DISPLAYS>1)
 225:hd44780.c     ****   switch (ActiveDisplay)
 226:hd44780.c     ****     {
 227:hd44780.c     ****       case 2 : DDR(LCD_E2_PORT)|=_BV(LCD_E2_PIN);
 228:hd44780.c     ****                break;
 229:hd44780.c     ****       #if (LCD_DISPLAYS>=3)
 230:hd44780.c     ****       case 3 : DDR(LCD_E3_PORT)|=_BV(LCD_E3_PIN);
 231:hd44780.c     ****                break;
 232:hd44780.c     ****       #endif
 233:hd44780.c     ****       #if (LCD_DISPLAYS==4)
 234:hd44780.c     ****       case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
 235:hd44780.c     ****                break;
 236:hd44780.c     ****       #endif
 237:hd44780.c     ****       default :
 238:hd44780.c     ****   #endif
 239:hd44780.c     ****                 DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
 240:hd44780.c     ****   #if (LCD_DISPLAYS>1)
 241:hd44780.c     ****     }
 242:hd44780.c     ****   #endif
 243:hd44780.c     **** }
 244:hd44780.c     **** 
 245:hd44780.c     **** 
 246:hd44780.c     **** /*************************************************************************
 247:hd44780.c     **** loops while lcd is busy, returns address counter
 248:hd44780.c     **** *************************************************************************/
 249:hd44780.c     **** #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
 250:hd44780.c     **** static uint8_t lcd_read(uint8_t rs);
 251:hd44780.c     **** 
 252:hd44780.c     **** static void lcd_waitbusy(void)
 253:hd44780.c     ****   {
 254:hd44780.c     ****     register uint8_t c;
 255:hd44780.c     ****     unsigned int ul1=0;
 256:hd44780.c     **** 
 257:hd44780.c     ****     while ( ((c=lcd_read(0)) & (1<<LCD_BUSY)) && ul1<((F_CPU/16384>=16)?F_CPU/16384:16))     // Wai
 258:hd44780.c     ****       ul1++;
 259:hd44780.c     ****   }
 260:hd44780.c     **** #endif
 261:hd44780.c     **** 
 262:hd44780.c     **** 
 263:hd44780.c     **** /*************************************************************************
 264:hd44780.c     **** Low-level function to read byte from LCD controller
 265:hd44780.c     **** Input:    rs     1: read data
 266:hd44780.c     ****                  0: read busy flag / address counter
 267:hd44780.c     **** Returns:  byte read from LCD controller
 268:hd44780.c     **** *************************************************************************/
 269:hd44780.c     **** #if RW_LINE_IMPLEMENTED==1
 270:hd44780.c     **** static uint8_t lcd_read(uint8_t rs)
 271:hd44780.c     ****   {
 272:hd44780.c     ****     uint8_t data;
 273:hd44780.c     ****     
 274:hd44780.c     ****     #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
 275:hd44780.c     ****     if (rs)
 276:hd44780.c     ****       lcd_waitbusy();
 277:hd44780.c     ****       if (PrevCmdInvolvedAddressCounter)
 278:hd44780.c     ****         {
 279:hd44780.c     ****           Delay_us(5);
 280:hd44780.c     ****           PrevCmdInvolvedAddressCounter=0;
 281:hd44780.c     ****         }
 282:hd44780.c     ****     #endif
 283:hd44780.c     **** 
 284:hd44780.c     ****     if (rs)
 285:hd44780.c     ****       {
 286:hd44780.c     ****         lcd_rs_port_high();                             // RS=1: Read Data
 287:hd44780.c     ****         #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
 288:hd44780.c     ****         PrevCmdInvolvedAddressCounter=1;
 289:hd44780.c     ****         #endif
 290:hd44780.c     ****       }
 291:hd44780.c     ****     else lcd_rs_port_low();                           // RS=0: Read Busy Flag
 292:hd44780.c     **** 
 293:hd44780.c     ****     
 294:hd44780.c     ****     lcd_rw_port_high();                               // RW=1: Read Mode
 295:hd44780.c     **** 
 296:hd44780.c     ****     #if LCD_BITS==4
 297:hd44780.c     ****       lcd_db7_ddr_low();                              // Configure Data Pins as Input
 298:hd44780.c     ****       lcd_db6_ddr_low();
 299:hd44780.c     ****       lcd_db5_ddr_low();
 300:hd44780.c     ****       lcd_db4_ddr_low();
 301:hd44780.c     **** 
 302:hd44780.c     ****       lcd_e_port_high();                              // Read High Nibble First
 303:hd44780.c     ****       Delay_ns(500);
 304:hd44780.c     **** 
 305:hd44780.c     ****       data=lcd_db4_pin_get() << 4 | lcd_db5_pin_get() << 5 |
 306:hd44780.c     ****            lcd_db6_pin_get() << 6 | lcd_db7_pin_get() << 7;
 307:hd44780.c     **** 
 308:hd44780.c     ****       lcd_e_port_low();
 309:hd44780.c     ****       Delay_ns(500);
 310:hd44780.c     **** 
 311:hd44780.c     ****       lcd_e_port_high();                              // Read Low Nibble
 312:hd44780.c     ****       Delay_ns(500);
 313:hd44780.c     **** 
 314:hd44780.c     ****       data|=lcd_db4_pin_get() << 0 | lcd_db5_pin_get() << 1 |
 315:hd44780.c     ****             lcd_db6_pin_get() << 2 | lcd_db7_pin_get() << 3;
 316:hd44780.c     **** 
 317:hd44780.c     ****       lcd_e_port_low();
 318:hd44780.c     **** 
 319:hd44780.c     ****       lcd_db7_ddr_high();                             // Configure Data Pins as Output
 320:hd44780.c     ****       lcd_db6_ddr_high();
 321:hd44780.c     ****       lcd_db5_ddr_high();
 322:hd44780.c     ****       lcd_db4_ddr_high();
 323:hd44780.c     **** 
 324:hd44780.c     ****       lcd_db7_port_high();                            // Pins High (Inactive)
 325:hd44780.c     ****       lcd_db6_port_high();
 326:hd44780.c     ****       lcd_db5_port_high();
 327:hd44780.c     ****       lcd_db4_port_high();
 328:hd44780.c     ****     #else //using 8-Bit-Mode
 329:hd44780.c     ****       lcd_db7_ddr_low();                              // Configure Data Pins as Input
 330:hd44780.c     ****       lcd_db6_ddr_low();
 331:hd44780.c     ****       lcd_db5_ddr_low();
 332:hd44780.c     ****       lcd_db4_ddr_low();
 333:hd44780.c     ****       lcd_db3_ddr_low();
 334:hd44780.c     ****       lcd_db2_ddr_low();
 335:hd44780.c     ****       lcd_db1_ddr_low();
 336:hd44780.c     ****       lcd_db0_ddr_low();
 337:hd44780.c     **** 
 338:hd44780.c     ****       lcd_e_port_high();
 339:hd44780.c     ****       Delay_ns(500);
 340:hd44780.c     **** 
 341:hd44780.c     ****       data=lcd_db7_pin_get() << 7 | lcd_db6_pin_get() << 6 |
 342:hd44780.c     ****            lcd_db5_pin_get() << 5 | lcd_db4_pin_get() << 4 |
 343:hd44780.c     ****            lcd_db3_pin_get() << 3 | lcd_db2_pin_get() << 2 |
 344:hd44780.c     ****            lcd_db1_pin_get() << 1 | lcd_db0_pin_get();
 345:hd44780.c     **** 
 346:hd44780.c     ****       lcd_e_port_low();
 347:hd44780.c     **** 
 348:hd44780.c     ****       lcd_db7_ddr_high();                             // Configure Data Pins as Output
 349:hd44780.c     ****       lcd_db6_ddr_high();
 350:hd44780.c     ****       lcd_db5_ddr_high();
 351:hd44780.c     ****       lcd_db4_ddr_high();
 352:hd44780.c     ****       lcd_db3_ddr_high();
 353:hd44780.c     ****       lcd_db2_ddr_high();
 354:hd44780.c     ****       lcd_db1_ddr_high();
 355:hd44780.c     ****       lcd_db0_ddr_high();
 356:hd44780.c     **** 
 357:hd44780.c     ****       lcd_db7_port_high();                            // Pins High (Inactive)
 358:hd44780.c     ****       lcd_db6_port_high();
 359:hd44780.c     ****       lcd_db5_port_high();
 360:hd44780.c     ****       lcd_db4_port_high();
 361:hd44780.c     ****       lcd_db3_port_high();
 362:hd44780.c     ****       lcd_db2_port_high();
 363:hd44780.c     ****       lcd_db1_port_high();
 364:hd44780.c     ****       lcd_db0_port_high();
 365:hd44780.c     ****     #endif
 366:hd44780.c     ****     
 367:hd44780.c     ****     lcd_rw_port_low();
 368:hd44780.c     **** 
 369:hd44780.c     ****     #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
 370:hd44780.c     ****     if (rs)
 371:hd44780.c     ****       Delay_us(40);
 372:hd44780.c     ****     else Delay_us(1);
 373:hd44780.c     ****     #endif
 374:hd44780.c     ****     return data;
 375:hd44780.c     ****   }
 376:hd44780.c     **** 
 377:hd44780.c     **** uint8_t lcd_getc()
 378:hd44780.c     ****   {
 379:hd44780.c     ****     return lcd_read(1);
 380:hd44780.c     ****   }
 381:hd44780.c     **** 
 382:hd44780.c     **** #endif
 383:hd44780.c     **** 
 384:hd44780.c     **** /*************************************************************************
 385:hd44780.c     **** Low-level function to write byte to LCD controller
 386:hd44780.c     **** Input:    data   byte to write to LCD
 387:hd44780.c     ****           rs     1: write data
 388:hd44780.c     ****                  0: write instruction
 389:hd44780.c     **** Returns:  none
 390:hd44780.c     **** *************************************************************************/
 391:hd44780.c     **** static void lcd_write(uint8_t data,uint8_t rs)
 392:hd44780.c     ****   {
 145               	.LM4:
 146               	.LFBB3:
 147 0000 CF93      		push r28
 148 0002 DF93      		push r29
 149               	/* prologue: function */
 150               	/* frame size = 0 */
 151               	/* stack size = 2 */
 152               	.L__stack_usage = 2
 153 0004 C82F      		mov r28,r24
 154 0006 D62F      		mov r29,r22
 393:hd44780.c     ****     #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
 394:hd44780.c     ****       lcd_waitbusy();
 395:hd44780.c     ****       if (PrevCmdInvolvedAddressCounter)
 396:hd44780.c     ****         {
 397:hd44780.c     ****           Delay_us(5);
 398:hd44780.c     ****           PrevCmdInvolvedAddressCounter=0;
 399:hd44780.c     ****         }
 400:hd44780.c     ****     #endif
 401:hd44780.c     **** 
 402:hd44780.c     ****     if (rs)
 156               	.LM5:
 157 0008 6623      		tst r22
 158 000a 01F0      		breq .L4
 403:hd44780.c     ****       {
 404:hd44780.c     ****         lcd_rs_port_high();                            // RS=1: Write Character
 160               	.LM6:
 161 000c C09A      		sbi 0x18,0
 162 000e 00C0      		rjmp .L5
 163               	.L4:
 405:hd44780.c     ****         #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
 406:hd44780.c     ****         PrevCmdInvolvedAddressCounter=1;
 407:hd44780.c     ****         #endif
 408:hd44780.c     ****       }
 409:hd44780.c     ****     else
 410:hd44780.c     ****       {
 411:hd44780.c     ****         lcd_rs_port_low();                          // RS=0: Write Command
 165               	.LM7:
 166 0010 C098      		cbi 0x18,0
 167               	.L5:
 412:hd44780.c     ****         #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
 413:hd44780.c     ****         PrevCmdInvolvedAddressCounter=0;
 414:hd44780.c     ****         #endif
 415:hd44780.c     ****       }
 416:hd44780.c     **** 
 417:hd44780.c     ****     #if LCD_BITS==4
 418:hd44780.c     ****       lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
 169               	.LM8:
 170 0012 C7FF      		sbrs r28,7
 171 0014 00C0      		rjmp .L6
 173               	.LM9:
 174 0016 A89A      		sbi 0x15,0
 175 0018 00C0      		rjmp .L7
 176               	.L6:
 178               	.LM10:
 179 001a A898      		cbi 0x15,0
 180               	.L7:
 419:hd44780.c     ****       lcd_db6_port_set(data&_BV(6));
 182               	.LM11:
 183 001c C6FF      		sbrs r28,6
 184 001e 00C0      		rjmp .L8
 186               	.LM12:
 187 0020 A99A      		sbi 0x15,1
 188 0022 00C0      		rjmp .L9
 189               	.L8:
 191               	.LM13:
 192 0024 A998      		cbi 0x15,1
 193               	.L9:
 420:hd44780.c     ****       lcd_db5_port_set(data&_BV(5));
 195               	.LM14:
 196 0026 C5FF      		sbrs r28,5
 197 0028 00C0      		rjmp .L10
 199               	.LM15:
 200 002a AA9A      		sbi 0x15,2
 201 002c 00C0      		rjmp .L11
 202               	.L10:
 204               	.LM16:
 205 002e AA98      		cbi 0x15,2
 206               	.L11:
 421:hd44780.c     ****       lcd_db4_port_set(data&_BV(4));
 208               	.LM17:
 209 0030 C4FF      		sbrs r28,4
 210 0032 00C0      		rjmp .L12
 212               	.LM18:
 213 0034 AB9A      		sbi 0x15,3
 214 0036 00C0      		rjmp .L13
 215               	.L12:
 217               	.LM19:
 218 0038 AB98      		cbi 0x15,3
 219               	.L13:
 422:hd44780.c     **** 
 423:hd44780.c     ****       Delay_ns(100);
 221               	.LM20:
 222 003a 00C0      		rjmp .
 424:hd44780.c     ****       lcd_e_port_high();
 224               	.LM21:
 225 003c 00D0      		rcall lcd_e_port_high
 425:hd44780.c     **** 
 426:hd44780.c     ****       Delay_ns(500);
 227               	.LM22:
 228 003e 82E0      		ldi r24,lo8(2)
 229 0040 8A95      	1:	dec r24
 230 0042 01F4      		brne 1b
 231 0044 00C0      		rjmp .
 427:hd44780.c     ****       lcd_e_port_low();
 233               	.LM23:
 234 0046 00D0      		rcall lcd_e_port_low
 428:hd44780.c     **** 
 429:hd44780.c     ****       lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
 236               	.LM24:
 237 0048 C3FF      		sbrs r28,3
 238 004a 00C0      		rjmp .L14
 239 004c A89A      		sbi 0x15,0
 240 004e 00C0      		rjmp .L15
 241               	.L14:
 243               	.LM25:
 244 0050 A898      		cbi 0x15,0
 245               	.L15:
 430:hd44780.c     ****       lcd_db6_port_set(data&_BV(2));
 247               	.LM26:
 248 0052 C2FF      		sbrs r28,2
 249 0054 00C0      		rjmp .L16
 251               	.LM27:
 252 0056 A99A      		sbi 0x15,1
 253 0058 00C0      		rjmp .L17
 254               	.L16:
 256               	.LM28:
 257 005a A998      		cbi 0x15,1
 258               	.L17:
 431:hd44780.c     ****       lcd_db5_port_set(data&_BV(1));
 260               	.LM29:
 261 005c C1FF      		sbrs r28,1
 262 005e 00C0      		rjmp .L18
 264               	.LM30:
 265 0060 AA9A      		sbi 0x15,2
 266 0062 00C0      		rjmp .L19
 267               	.L18:
 269               	.LM31:
 270 0064 AA98      		cbi 0x15,2
 271               	.L19:
 432:hd44780.c     ****       lcd_db4_port_set(data&_BV(0));
 273               	.LM32:
 274 0066 C0FF      		sbrs r28,0
 275 0068 00C0      		rjmp .L20
 277               	.LM33:
 278 006a AB9A      		sbi 0x15,3
 279 006c 00C0      		rjmp .L21
 280               	.L20:
 282               	.LM34:
 283 006e AB98      		cbi 0x15,3
 284               	.L21:
 433:hd44780.c     **** 
 434:hd44780.c     ****       Delay_ns(100);
 286               	.LM35:
 287 0070 00C0      		rjmp .
 435:hd44780.c     ****       lcd_e_port_high();
 289               	.LM36:
 290 0072 00D0      		rcall lcd_e_port_high
 436:hd44780.c     **** 
 437:hd44780.c     ****       Delay_ns(500);
 292               	.LM37:
 293 0074 92E0      		ldi r25,lo8(2)
 294 0076 9A95      	1:	dec r25
 295 0078 01F4      		brne 1b
 296 007a 00C0      		rjmp .
 438:hd44780.c     ****       lcd_e_port_low();
 298               	.LM38:
 299 007c 00D0      		rcall lcd_e_port_low
 439:hd44780.c     **** 
 440:hd44780.c     ****       lcd_db7_port_high();                            // All Data Pins High (Inactive)
 301               	.LM39:
 302 007e A89A      		sbi 0x15,0
 441:hd44780.c     ****       lcd_db6_port_high();
 304               	.LM40:
 305 0080 A99A      		sbi 0x15,1
 442:hd44780.c     ****       lcd_db5_port_high();
 307               	.LM41:
 308 0082 AA9A      		sbi 0x15,2
 443:hd44780.c     ****       lcd_db4_port_high();
 310               	.LM42:
 311 0084 AB9A      		sbi 0x15,3
 444:hd44780.c     **** 
 445:hd44780.c     ****     #else //using 8-Bit_Mode
 446:hd44780.c     ****       lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
 447:hd44780.c     ****       lcd_db6_port_set(data&_BV(6));
 448:hd44780.c     ****       lcd_db5_port_set(data&_BV(5));
 449:hd44780.c     ****       lcd_db4_port_set(data&_BV(4));
 450:hd44780.c     ****       lcd_db3_port_set(data&_BV(3));                  //Output High Nibble
 451:hd44780.c     ****       lcd_db2_port_set(data&_BV(2));
 452:hd44780.c     ****       lcd_db1_port_set(data&_BV(1));
 453:hd44780.c     ****       lcd_db0_port_set(data&_BV(0));
 454:hd44780.c     **** 
 455:hd44780.c     ****       Delay_ns(100);
 456:hd44780.c     ****       lcd_e_port_high();
 457:hd44780.c     ****       Delay_ns(500);
 458:hd44780.c     ****       lcd_e_port_low();
 459:hd44780.c     **** 
 460:hd44780.c     ****       lcd_db7_port_high();                            // All Data Pins High (Inactive)
 461:hd44780.c     ****       lcd_db6_port_high();
 462:hd44780.c     ****       lcd_db5_port_high();
 463:hd44780.c     ****       lcd_db4_port_high();
 464:hd44780.c     ****       lcd_db3_port_high();
 465:hd44780.c     ****       lcd_db2_port_high();
 466:hd44780.c     ****       lcd_db1_port_high();
 467:hd44780.c     ****       lcd_db0_port_high();
 468:hd44780.c     ****     #endif
 469:hd44780.c     **** 
 470:hd44780.c     ****     #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
 471:hd44780.c     ****       if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
 313               	.LM43:
 314 0086 D111      		cpse r29,__zero_reg__
 315 0088 00C0      		rjmp .L22
 316 008a C430      		cpi r28,lo8(4)
 317 008c 00F4      		brsh .L22
 472:hd44780.c     ****         Delay_us(1640);
 319               	.LM44:
 320 008e 8FE9      		ldi r24,lo8(6559)
 321 0090 99E1      		ldi r25,hi8(6559)
 322 0092 0197      	1:	sbiw r24,1
 323 0094 01F4      		brne 1b
 324 0096 00C0      		rjmp .
 325 0098 00C0      		rjmp .L24
 326               	.L22:
 473:hd44780.c     ****       else Delay_us(40);
 328               	.LM45:
 329 009a 95ED      		ldi r25,lo8(-43)
 330 009c 9A95      	1:	dec r25
 331 009e 01F4      		brne 1b
 332               	.L24:
 333 00a0 0000      		nop
 334               	/* epilogue start */
 474:hd44780.c     ****     #endif
 475:hd44780.c     ****   }
 336               	.LM46:
 337 00a2 DF91      		pop r29
 338 00a4 CF91      		pop r28
 339 00a6 0895      		ret
 341               	.Lscope3:
 342               		.section	.text.lcd_command,"ax",@progbits
 345               	.global	lcd_command
 347               	lcd_command:
 476:hd44780.c     **** 
 477:hd44780.c     **** /*************************************************************************
 478:hd44780.c     **** Send LCD controller instruction command
 479:hd44780.c     **** Input:   instruction to send to LCD controller, see HD44780 data sheet
 480:hd44780.c     **** Returns: none
 481:hd44780.c     **** *************************************************************************/
 482:hd44780.c     **** void lcd_command(uint8_t cmd)
 483:hd44780.c     ****   {
 349               	.LM47:
 350               	.LFBB4:
 351               	/* prologue: function */
 352               	/* frame size = 0 */
 353               	/* stack size = 0 */
 354               	.L__stack_usage = 0
 484:hd44780.c     ****     lcd_write(cmd,0);
 356               	.LM48:
 357 0000 60E0      		ldi r22,0
 358 0002 00C0      		rjmp lcd_write
 360               	.Lscope4:
 361               		.section	.text.lcd_goto,"ax",@progbits
 364               	.global	lcd_goto
 366               	lcd_goto:
 485:hd44780.c     ****   }
 486:hd44780.c     **** 
 487:hd44780.c     **** /*************************************************************************
 488:hd44780.c     **** Set cursor to specified position
 489:hd44780.c     **** Input:    pos position
 490:hd44780.c     **** Returns:  none
 491:hd44780.c     **** *************************************************************************/
 492:hd44780.c     **** void lcd_goto(uint8_t pos)
 493:hd44780.c     ****   {
 368               	.LM49:
 369               	.LFBB5:
 370               	/* prologue: function */
 371               	/* frame size = 0 */
 372               	/* stack size = 0 */
 373               	.L__stack_usage = 0
 494:hd44780.c     ****     lcd_command((1<<LCD_DDRAM)+pos);
 375               	.LM50:
 376 0000 8058      		subi r24,lo8(-(-128))
 377 0002 00C0      		rjmp lcd_command
 379               	.Lscope5:
 380               		.section	.text.lcd_clrscr,"ax",@progbits
 382               	.global	lcd_clrscr
 384               	lcd_clrscr:
 495:hd44780.c     ****   }
 496:hd44780.c     **** 
 497:hd44780.c     **** 
 498:hd44780.c     **** /*************************************************************************
 499:hd44780.c     **** Clear screen
 500:hd44780.c     **** Input:    none
 501:hd44780.c     **** Returns:  none
 502:hd44780.c     **** *************************************************************************/
 503:hd44780.c     **** void lcd_clrscr()
 504:hd44780.c     ****   {
 386               	.LM51:
 387               	.LFBB6:
 388               	/* prologue: function */
 389               	/* frame size = 0 */
 390               	/* stack size = 0 */
 391               	.L__stack_usage = 0
 505:hd44780.c     ****     lcd_command(1<<LCD_CLR);
 393               	.LM52:
 394 0000 81E0      		ldi r24,lo8(1)
 395 0002 00C0      		rjmp lcd_command
 397               	.Lscope6:
 398               		.section	.text.lcd_home,"ax",@progbits
 400               	.global	lcd_home
 402               	lcd_home:
 506:hd44780.c     ****   }
 507:hd44780.c     **** 
 508:hd44780.c     **** 
 509:hd44780.c     **** /*************************************************************************
 510:hd44780.c     **** Return home
 511:hd44780.c     **** Input:    none
 512:hd44780.c     **** Returns:  none
 513:hd44780.c     **** *************************************************************************/
 514:hd44780.c     **** void lcd_home()
 515:hd44780.c     ****   {
 404               	.LM53:
 405               	.LFBB7:
 406               	/* prologue: function */
 407               	/* frame size = 0 */
 408               	/* stack size = 0 */
 409               	.L__stack_usage = 0
 516:hd44780.c     ****     lcd_command(1<<LCD_HOME);
 411               	.LM54:
 412 0000 82E0      		ldi r24,lo8(2)
 413 0002 00C0      		rjmp lcd_command
 415               	.Lscope7:
 416               		.section	.text.lcd_putc,"ax",@progbits
 419               	.global	lcd_putc
 421               	lcd_putc:
 517:hd44780.c     ****   }
 518:hd44780.c     **** 
 519:hd44780.c     **** 
 520:hd44780.c     **** /*************************************************************************
 521:hd44780.c     **** Display character
 522:hd44780.c     **** Input:    character to be displayed
 523:hd44780.c     **** Returns:  none
 524:hd44780.c     **** *************************************************************************/
 525:hd44780.c     **** void lcd_putc(char c)
 526:hd44780.c     ****   {
 423               	.LM55:
 424               	.LFBB8:
 425               	/* prologue: function */
 426               	/* frame size = 0 */
 427               	/* stack size = 0 */
 428               	.L__stack_usage = 0
 527:hd44780.c     ****     lcd_write(c,1);
 430               	.LM56:
 431 0000 61E0      		ldi r22,lo8(1)
 432 0002 00C0      		rjmp lcd_write
 434               	.Lscope8:
 435               		.section	.text.lcd_puts,"ax",@progbits
 438               	.global	lcd_puts
 440               	lcd_puts:
 528:hd44780.c     ****   }
 529:hd44780.c     **** 
 530:hd44780.c     **** 
 531:hd44780.c     **** /*************************************************************************
 532:hd44780.c     **** Display string
 533:hd44780.c     **** Input:    string to be displayed
 534:hd44780.c     **** Returns:  none
 535:hd44780.c     **** *************************************************************************/
 536:hd44780.c     **** void lcd_puts(const char *s)
 537:hd44780.c     ****   {
 442               	.LM57:
 443               	.LFBB9:
 444 0000 CF93      		push r28
 445 0002 DF93      		push r29
 446               	/* prologue: function */
 447               	/* frame size = 0 */
 448               	/* stack size = 2 */
 449               	.L__stack_usage = 2
 450 0004 EC01      		movw r28,r24
 451               	.L32:
 538:hd44780.c     ****     register char c;
 539:hd44780.c     **** 
 540:hd44780.c     ****     while ((c=*s++)) 
 453               	.LM58:
 454 0006 8991      		ld r24,Y+
 455 0008 8823      		tst r24
 456 000a 01F0      		breq .L34
 541:hd44780.c     ****       lcd_putc(c);
 458               	.LM59:
 459 000c 00D0      		rcall lcd_putc
 460 000e 00C0      		rjmp .L32
 461               	.L34:
 462               	/* epilogue start */
 542:hd44780.c     ****   }
 464               	.LM60:
 465 0010 DF91      		pop r29
 466 0012 CF91      		pop r28
 467 0014 0895      		ret
 472               	.Lscope9:
 473               		.section	.text.lcd_puts_P,"ax",@progbits
 476               	.global	lcd_puts_P
 478               	lcd_puts_P:
 543:hd44780.c     **** 
 544:hd44780.c     **** 
 545:hd44780.c     **** /*************************************************************************
 546:hd44780.c     **** Display string from flash
 547:hd44780.c     **** Input:    string to be displayed
 548:hd44780.c     **** Returns:  none
 549:hd44780.c     **** *************************************************************************/
 550:hd44780.c     **** void lcd_puts_P(const char *progmem_s)
 551:hd44780.c     ****   {
 480               	.LM61:
 481               	.LFBB10:
 482 0000 CF93      		push r28
 483 0002 DF93      		push r29
 484               	/* prologue: function */
 485               	/* frame size = 0 */
 486               	/* stack size = 2 */
 487               	.L__stack_usage = 2
 488 0004 FC01      		movw r30,r24
 489               	.L36:
 490               	.LBB2:
 552:hd44780.c     ****     register char c;
 553:hd44780.c     **** 
 554:hd44780.c     ****     while ((c=pgm_read_byte(progmem_s++))) 
 492               	.LM62:
 493               	/* #APP */
 494               	 ;  554 "hd44780.c" 1
 495 0006 8491      		lpm r24, Z
 496               		
 497               	 ;  0 "" 2
 498               	/* #NOAPP */
 499 0008 EF01      		movw r28,r30
 500 000a 2196      		adiw r28,1
 501               	.LBE2:
 502 000c 8823      		tst r24
 503 000e 01F0      		breq .L38
 555:hd44780.c     ****       lcd_putc(c);
 505               	.LM63:
 506 0010 00D0      		rcall lcd_putc
 507 0012 FE01      		movw r30,r28
 508 0014 00C0      		rjmp .L36
 509               	.L38:
 510               	/* epilogue start */
 556:hd44780.c     ****   }
 512               	.LM64:
 513 0016 DF91      		pop r29
 514 0018 CF91      		pop r28
 515 001a 0895      		ret
 520               	.Lscope10:
 521               		.section	.text.lcd_init,"ax",@progbits
 523               	.global	lcd_init
 525               	lcd_init:
 557:hd44780.c     **** 
 558:hd44780.c     **** /*************************************************************************
 559:hd44780.c     **** Initialize display
 560:hd44780.c     **** Input:    none
 561:hd44780.c     **** Returns:  none
 562:hd44780.c     **** *************************************************************************/
 563:hd44780.c     **** void lcd_init()
 564:hd44780.c     ****   {
 527               	.LM65:
 528               	.LFBB11:
 529               	/* prologue: function */
 530               	/* frame size = 0 */
 531               	/* stack size = 0 */
 532               	.L__stack_usage = 0
 533               	.LBB5:
 534               	.LBB6:
 239:hd44780.c     ****   #if (LCD_DISPLAYS>1)
 536               	.LM66:
 537 0000 B99A      		sbi 0x17,1
 538               	.LBE6:
 539               	.LBE5:
 565:hd44780.c     ****     //Set All Pins as Output
 566:hd44780.c     ****     lcd_e_ddr_high();
 567:hd44780.c     ****     lcd_rs_ddr_high();
 541               	.LM67:
 542 0002 B89A      		sbi 0x17,0
 568:hd44780.c     ****     #if RW_LINE_IMPLEMENTED==1
 569:hd44780.c     ****       lcd_rw_ddr_high();
 570:hd44780.c     ****     #endif
 571:hd44780.c     ****     lcd_db7_ddr_high();
 544               	.LM68:
 545 0004 A09A      		sbi 0x14,0
 572:hd44780.c     ****     lcd_db6_ddr_high();
 547               	.LM69:
 548 0006 A19A      		sbi 0x14,1
 573:hd44780.c     ****     lcd_db5_ddr_high();
 550               	.LM70:
 551 0008 A29A      		sbi 0x14,2
 574:hd44780.c     ****     lcd_db4_ddr_high();
 553               	.LM71:
 554 000a A39A      		sbi 0x14,3
 575:hd44780.c     ****     #if LCD_BITS==8
 576:hd44780.c     ****       lcd_db3_ddr_high();
 577:hd44780.c     ****       lcd_db2_ddr_high();
 578:hd44780.c     ****       lcd_db1_ddr_high();
 579:hd44780.c     ****       lcd_db0_ddr_high();
 580:hd44780.c     ****     #endif
 581:hd44780.c     **** 
 582:hd44780.c     ****     //Set All Control Lines Low
 583:hd44780.c     ****     lcd_e_port_low();
 556               	.LM72:
 557 000c 00D0      		rcall lcd_e_port_low
 584:hd44780.c     ****     lcd_rs_port_low();
 559               	.LM73:
 560 000e C098      		cbi 0x18,0
 585:hd44780.c     ****     #if RW_LINE_IMPLEMENTED==1
 586:hd44780.c     ****       lcd_rw_port_low();
 587:hd44780.c     ****     #endif
 588:hd44780.c     **** 
 589:hd44780.c     ****     //Set All Data Lines High
 590:hd44780.c     ****     lcd_db7_port_high();
 562               	.LM74:
 563 0010 A89A      		sbi 0x15,0
 591:hd44780.c     ****     lcd_db6_port_high();
 565               	.LM75:
 566 0012 A99A      		sbi 0x15,1
 592:hd44780.c     ****     lcd_db5_port_high();
 568               	.LM76:
 569 0014 AA9A      		sbi 0x15,2
 593:hd44780.c     ****     lcd_db4_port_high();
 571               	.LM77:
 572 0016 AB9A      		sbi 0x15,3
 594:hd44780.c     ****     #if LCD_BITS==8
 595:hd44780.c     ****       lcd_db3_port_high();
 596:hd44780.c     ****       lcd_db2_port_high();
 597:hd44780.c     ****       lcd_db1_port_high();
 598:hd44780.c     ****       lcd_db0_port_high();
 599:hd44780.c     ****     #endif
 600:hd44780.c     **** 
 601:hd44780.c     ****     //Startup Delay
 602:hd44780.c     ****     Delay_ms(DELAY_RESET);
 574               	.LM78:
 575 0018 8FE5      		ldi r24,lo8(-5537)
 576 001a 9AEE      		ldi r25,hi8(-5537)
 577 001c 0197      	1:	sbiw r24,1
 578 001e 01F4      		brne 1b
 579 0020 00C0      		rjmp .
 580 0022 0000      		nop
 603:hd44780.c     **** 
 604:hd44780.c     ****     //Initialize Display
 605:hd44780.c     ****     lcd_db7_port_low();
 582               	.LM79:
 583 0024 A898      		cbi 0x15,0
 606:hd44780.c     ****     lcd_db6_port_low();
 585               	.LM80:
 586 0026 A998      		cbi 0x15,1
 607:hd44780.c     ****     Delay_ns(100);
 588               	.LM81:
 589 0028 00C0      		rjmp .
 608:hd44780.c     ****     lcd_e_port_high();
 591               	.LM82:
 592 002a 00D0      		rcall lcd_e_port_high
 609:hd44780.c     ****     Delay_ns(500);
 594               	.LM83:
 595 002c 92E0      		ldi r25,lo8(2)
 596 002e 9A95      	1:	dec r25
 597 0030 01F4      		brne 1b
 598 0032 00C0      		rjmp .
 610:hd44780.c     ****     lcd_e_port_low();
 600               	.LM84:
 601 0034 00D0      		rcall lcd_e_port_low
 611:hd44780.c     **** 
 612:hd44780.c     ****     Delay_us(4100);
 603               	.LM85:
 604 0036 8FE0      		ldi r24,lo8(16399)
 605 0038 90E4      		ldi r25,hi8(16399)
 606 003a 0197      	1:	sbiw r24,1
 607 003c 01F4      		brne 1b
 608 003e 00C0      		rjmp .
 609 0040 0000      		nop
 613:hd44780.c     **** 
 614:hd44780.c     ****     lcd_e_port_high();
 611               	.LM86:
 612 0042 00D0      		rcall lcd_e_port_high
 615:hd44780.c     ****     Delay_ns(500);
 614               	.LM87:
 615 0044 92E0      		ldi r25,lo8(2)
 616 0046 9A95      	1:	dec r25
 617 0048 01F4      		brne 1b
 618 004a 00C0      		rjmp .
 616:hd44780.c     ****     lcd_e_port_low();
 620               	.LM88:
 621 004c 00D0      		rcall lcd_e_port_low
 617:hd44780.c     **** 
 618:hd44780.c     ****     Delay_us(100);
 623               	.LM89:
 624 004e 8FE8      		ldi r24,lo8(399)
 625 0050 91E0      		ldi r25,hi8(399)
 626 0052 0197      	1:	sbiw r24,1
 627 0054 01F4      		brne 1b
 628 0056 00C0      		rjmp .
 629 0058 0000      		nop
 619:hd44780.c     **** 
 620:hd44780.c     ****     lcd_e_port_high();
 631               	.LM90:
 632 005a 00D0      		rcall lcd_e_port_high
 621:hd44780.c     ****     Delay_ns(500);
 634               	.LM91:
 635 005c 92E0      		ldi r25,lo8(2)
 636 005e 9A95      	1:	dec r25
 637 0060 01F4      		brne 1b
 638 0062 00C0      		rjmp .
 622:hd44780.c     ****     lcd_e_port_low();
 640               	.LM92:
 641 0064 00D0      		rcall lcd_e_port_low
 623:hd44780.c     **** 
 624:hd44780.c     ****     Delay_us(40);
 643               	.LM93:
 644 0066 85ED      		ldi r24,lo8(-43)
 645 0068 8A95      	1:	dec r24
 646 006a 01F4      		brne 1b
 647 006c 0000      		nop
 625:hd44780.c     **** 
 626:hd44780.c     ****     //Init differs between 4-bit and 8-bit from here
 627:hd44780.c     ****     #if (LCD_BITS==4)
 628:hd44780.c     ****       lcd_db4_port_low();
 649               	.LM94:
 650 006e AB98      		cbi 0x15,3
 629:hd44780.c     ****       Delay_ns(100);
 652               	.LM95:
 653 0070 00C0      		rjmp .
 630:hd44780.c     ****       lcd_e_port_high();
 655               	.LM96:
 656 0072 00D0      		rcall lcd_e_port_high
 631:hd44780.c     ****       Delay_ns(500);
 658               	.LM97:
 659 0074 92E0      		ldi r25,lo8(2)
 660 0076 9A95      	1:	dec r25
 661 0078 01F4      		brne 1b
 662 007a 00C0      		rjmp .
 632:hd44780.c     ****       lcd_e_port_low();
 664               	.LM98:
 665 007c 00D0      		rcall lcd_e_port_low
 633:hd44780.c     ****       Delay_us(40);
 667               	.LM99:
 668 007e 85ED      		ldi r24,lo8(-43)
 669 0080 8A95      	1:	dec r24
 670 0082 01F4      		brne 1b
 671 0084 0000      		nop
 634:hd44780.c     **** 
 635:hd44780.c     ****       lcd_db4_port_low();
 673               	.LM100:
 674 0086 AB98      		cbi 0x15,3
 636:hd44780.c     ****       Delay_ns(100);
 676               	.LM101:
 677 0088 00C0      		rjmp .
 637:hd44780.c     ****       lcd_e_port_high();
 679               	.LM102:
 680 008a 00D0      		rcall lcd_e_port_high
 638:hd44780.c     ****       Delay_ns(500);
 682               	.LM103:
 683 008c 92E0      		ldi r25,lo8(2)
 684 008e 9A95      	1:	dec r25
 685 0090 01F4      		brne 1b
 686 0092 00C0      		rjmp .
 639:hd44780.c     ****       lcd_e_port_low();
 688               	.LM104:
 689 0094 00D0      		rcall lcd_e_port_low
 640:hd44780.c     ****       Delay_ns(500);
 691               	.LM105:
 692 0096 82E0      		ldi r24,lo8(2)
 693 0098 8A95      	1:	dec r24
 694 009a 01F4      		brne 1b
 695 009c 00C0      		rjmp .
 641:hd44780.c     **** 
 642:hd44780.c     ****       #if (LCD_DISPLAYS==1)
 643:hd44780.c     ****         if (LCD_DISPLAY_LINES>1)
 644:hd44780.c     ****           lcd_db7_port_high();
 697               	.LM106:
 698 009e A89A      		sbi 0x15,0
 645:hd44780.c     ****       #else
 646:hd44780.c     ****         unsigned char c;
 647:hd44780.c     ****         switch (ActiveDisplay)
 648:hd44780.c     ****           {
 649:hd44780.c     ****             case 1 : c=LCD_DISPLAY_LINES; break;
 650:hd44780.c     ****             case 2 : c=LCD_DISPLAY2_LINES; break;
 651:hd44780.c     ****             #if (LCD_DISPLAYS>=3)
 652:hd44780.c     ****             case 3 : c=LCD_DISPLAY3_LINES; break;
 653:hd44780.c     ****             #endif
 654:hd44780.c     ****             #if (LCD_DISPLAYS==4)
 655:hd44780.c     ****             case 4 : c=LCD_DISPLAY4_LINES; break;
 656:hd44780.c     ****             #endif
 657:hd44780.c     ****           }
 658:hd44780.c     ****         if (c>1)
 659:hd44780.c     ****           lcd_db7_port_high();
 660:hd44780.c     ****       #endif
 661:hd44780.c     **** 
 662:hd44780.c     ****       Delay_ns(100);
 700               	.LM107:
 701 00a0 00C0      		rjmp .
 663:hd44780.c     ****       lcd_e_port_high();
 703               	.LM108:
 704 00a2 00D0      		rcall lcd_e_port_high
 664:hd44780.c     ****       Delay_ns(500);
 706               	.LM109:
 707 00a4 92E0      		ldi r25,lo8(2)
 708 00a6 9A95      	1:	dec r25
 709 00a8 01F4      		brne 1b
 710 00aa 00C0      		rjmp .
 665:hd44780.c     ****       lcd_e_port_low();
 712               	.LM110:
 713 00ac 00D0      		rcall lcd_e_port_low
 666:hd44780.c     ****       Delay_us(40);
 715               	.LM111:
 716 00ae 85ED      		ldi r24,lo8(-43)
 717 00b0 8A95      	1:	dec r24
 718 00b2 01F4      		brne 1b
 719 00b4 0000      		nop
 667:hd44780.c     ****     #else
 668:hd44780.c     ****       #if (LCD_DISPLAYS==1)
 669:hd44780.c     ****         if (LCD_DISPLAY_LINES<2)
 670:hd44780.c     ****           lcd_db3_port_low();
 671:hd44780.c     ****       #else
 672:hd44780.c     ****         unsigned char c;
 673:hd44780.c     ****         switch (ActiveDisplay)
 674:hd44780.c     ****           {
 675:hd44780.c     ****             case 1 : c=LCD_DISPLAY_LINES; break;
 676:hd44780.c     ****             case 2 : c=LCD_DISPLAY2_LINES; break;
 677:hd44780.c     ****             #if (LCD_DISPLAYS>=3)
 678:hd44780.c     ****             case 3 : c=LCD_DISPLAY3_LINES; break;
 679:hd44780.c     ****             #endif
 680:hd44780.c     ****             #if (LCD_DISPLAYS==4)
 681:hd44780.c     ****             case 4 : c=LCD_DISPLAY4_LINES; break;
 682:hd44780.c     ****             #endif
 683:hd44780.c     ****           }
 684:hd44780.c     ****         if (c<2)
 685:hd44780.c     ****           lcd_db3_port_low();
 686:hd44780.c     ****       #endif
 687:hd44780.c     **** 
 688:hd44780.c     ****       lcd_db2_port_low();
 689:hd44780.c     ****       Delay_ns(100);
 690:hd44780.c     ****       lcd_e_port_high();
 691:hd44780.c     ****       Delay_ns(500);
 692:hd44780.c     ****       lcd_e_port_low();
 693:hd44780.c     ****       Delay_us(40);
 694:hd44780.c     ****     #endif
 695:hd44780.c     **** 
 696:hd44780.c     ****     //Display Off
 697:hd44780.c     ****     lcd_command(_BV(LCD_DISPLAYMODE));
 721               	.LM112:
 722 00b6 88E0      		ldi r24,lo8(8)
 723 00b8 00D0      		rcall lcd_command
 698:hd44780.c     **** 
 699:hd44780.c     ****     //Display Clear
 700:hd44780.c     ****     lcd_clrscr();
 725               	.LM113:
 726 00ba 00D0      		rcall lcd_clrscr
 701:hd44780.c     **** 
 702:hd44780.c     ****     //Entry Mode Set
 703:hd44780.c     ****     lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
 728               	.LM114:
 729 00bc 86E0      		ldi r24,lo8(6)
 730 00be 00D0      		rcall lcd_command
 704:hd44780.c     **** 
 705:hd44780.c     ****     //Display On
 706:hd44780.c     ****     lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
 732               	.LM115:
 733 00c0 8CE0      		ldi r24,lo8(12)
 734 00c2 00C0      		rjmp lcd_command
 736               	.Lscope11:
 737               		.text
 739               	.Letext0:
 740               		.ident	"GCC: (AVR_8_bit_GNU_Toolchain_3.5.0_1662) 4.9.2"
DEFINED SYMBOLS
                            *ABS*:00000000 hd44780.c
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:2      *ABS*:0000003e __SP_H__
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:3      *ABS*:0000003d __SP_L__
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:4      *ABS*:0000003f __SREG__
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:107    .text.lcd_e_port_low:00000000 lcd_e_port_low
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:124    .text.lcd_e_port_high:00000000 lcd_e_port_high
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:143    .text.lcd_write:00000000 lcd_write
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:347    .text.lcd_command:00000000 lcd_command
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:366    .text.lcd_goto:00000000 lcd_goto
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:384    .text.lcd_clrscr:00000000 lcd_clrscr
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:402    .text.lcd_home:00000000 lcd_home
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:421    .text.lcd_putc:00000000 lcd_putc
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:440    .text.lcd_puts:00000000 lcd_puts
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:478    .text.lcd_puts_P:00000000 lcd_puts_P
C:\Users\Magenta\AppData\Local\Temp\cc3mK64v.s:525    .text.lcd_init:00000000 lcd_init

NO UNDEFINED SYMBOLS
